/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cprog_exer6;

import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author xvitualla
 */
public class Products extends javax.swing.JFrame {

String[] custOrder = new String[4];
        
    public Products() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        id = new javax.swing.JTextField();
        pType = new javax.swing.JTextField();
        pDesc = new javax.swing.JTextField();
        pSupplier = new javax.swing.JTextField();
        pCost = new javax.swing.JTextField();
        pThreshold = new javax.swing.JTextField();
        pQuantity = new javax.swing.JTextField();
        pDate = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        pTable = new javax.swing.JTable();
        saveBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pTable2 = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        pLaborCost = new javax.swing.JTextField();
        pOverheadCost = new javax.swing.JTextField();
        pDesiredProfit = new javax.swing.JTextField();
        saveBtn2 = new javax.swing.JButton();
        threshBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        id.setEditable(false);
        id.setBackground(new java.awt.Color(204, 204, 204));

        pType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pTypeActionPerformed(evt);
            }
        });

        pQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pQuantityActionPerformed(evt);
            }
        });

        pDate.setEditable(false);
        pDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pDateActionPerformed(evt);
            }
        });

        jLabel1.setText("Product ID");

        jLabel2.setText("Product Type");

        jLabel3.setText("Product Description");

        jLabel4.setText("Supplier");

        jLabel5.setText("Unit Cost");

        jLabel6.setText("Threshold Quantity: ");

        jLabel7.setText("Quantity");

        jLabel9.setText("Date Received");

        jLabel10.setText("+");

        pTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "PType", "PDesc", "TotQuantity", "Tot Cost", "Tot Price", "Tot Orders"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(pTable);

        saveBtn.setText("Stock IN");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel11.setText("Products Stock-In/Stock-Out");

        pTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Prod ID", "Batch #", "Supplier", "Quantity", "Unit Cost", "Unit Price", "Date Received", "Orders"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pTable2MouseClicked(evt);
            }
        });
        pTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pTable2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(pTable2);

        jLabel12.setText("Labor Cost");

        jLabel13.setText("Overhead Cost");

        jLabel14.setText("Desired Profit");

        pLaborCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pLaborCostActionPerformed(evt);
            }
        });

        saveBtn2.setText("SAVE");
        saveBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtn2ActionPerformed(evt);
            }
        });

        threshBtn.setText("No Threshold");
        threshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threshBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(490, 490, 490)
                .addComponent(jLabel11)
                .addContainerGap(621, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(111, 111, 111)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(81, 81, 81)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel1)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(pQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(69, 69, 69)
                                        .addComponent(threshBtn)))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(id)
                                .addComponent(pType)
                                .addComponent(pDesc)
                                .addComponent(pSupplier)
                                .addComponent(pCost)
                                .addComponent(pThreshold)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextField10, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(saveBtn2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(pDesiredProfit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                                    .addComponent(pOverheadCost, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pLaborCost, javax.swing.GroupLayout.Alignment.LEADING)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(deleteBtn)
                                .addComponent(editBtn)
                                .addComponent(saveBtn))
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addComponent(pDate, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel10)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addComponent(saveBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBtn)
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pLaborCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pOverheadCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pDesiredProfit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveBtn2)
                            .addComponent(threshBtn))
                        .addContainerGap(85, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pTypeActionPerformed

    private void pQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pQuantityActionPerformed

    }//GEN-LAST:event_pQuantityActionPerformed

    private void pDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pDateActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        DefaultTableModel products_Table2 = (DefaultTableModel) pTable2.getModel();
        DefaultTableModel products_Table = (DefaultTableModel) pTable.getModel();

        Cprog_Exer6 a = new Cprog_Exer6();
        String[][] productsXml = a.readFromXmlProducts();

        if (productsXml != null) {
            counter = productsXml.length;
        }
        

        for (int i = 0; i < counter; i++) {
            Cprog_Exer6.deleteRowFromXml("products", "product", "field1", productsXml[i][0]);
        }
        
        int selectedId = Integer.parseInt(id.getText()) - 1;  
        
        String storedId = products[selectedId][0];
        String storedType = products[selectedId][1];
        String storedDesc = products[selectedId][2];
        String newSupplier = pSupplier.getText();
        String newUnitCost = pCost.getText();
        String newThreshold = pThreshold.getText();
        String newQuantity = pQuantity.getText();
        String newDate = pDate.getText();
       
        products[selectedId][0] = storedId;
        products[selectedId][1] = storedType;
        products[selectedId][2] = storedDesc;
        products[selectedId][3] = newSupplier;
        products[selectedId][4] = newUnitCost;
        products[selectedId][5] = newThreshold;
        products[selectedId][6] = newQuantity;
        products[selectedId][7] = newDate;
        
        for (int i = 0; i < counter; i++) {
            if (products[i][0] != null) {
                for (int j = 0; j < 8; j++) {
                    newProd[j] = products[i][j];
                    newProd[8] = String.valueOf(costs[i][0]);
                    newProd[9] = String.valueOf(costs[i][1]);
                    newProd[10] = String.valueOf(costs[i][2]);
                    newProd[11] = String.valueOf(orderCount[i][0]);
                }
                Cprog_Exer6.appendToXml("products", "product", newProd);
            }
        }

        products_Table.setRowCount(0); 
        for(int x = 0; x < counter ; x++){
            if(x == 0){
                showArray(x);
            }else {
                boolean alreadyInTable = false;

                for(int y = 0; y < products_Table.getRowCount(); y++){
                    if(products[x][1].equals(products_Table.getValueAt(y, 1)) && products[x][2].equals(products_Table.getValueAt(y, 2))){
                       alreadyInTable = true; 
                       break;
                    }
                }
                if(!alreadyInTable) {
                    showArray(x);
                }
            }
        }

        products_Table2.setRowCount(0); 
        int batchNumber = 0;
        for (int i = 0; i < counter; i++) {
            if (products[i][0] != null && products[i][1].equals(pType.getText()) && products[i][2].equals(pDesc.getText())) {
                batchNumber++;

                int storedLaborCost = costs[i][0];
                int storedOverheadCost = costs[i][1];
                int storedDesiredProfit = costs[i][2];

                int unitPrice = Integer.parseInt(products[i][4]) + storedLaborCost + storedOverheadCost + storedDesiredProfit;

                String[] item2 = {products[i][0], String.valueOf(batchNumber), products[i][3], products[i][6], products[i][4], String.valueOf(unitPrice), products[i][7], String.valueOf(orderCount[i][0])};
                products_Table2.addRow(item2);
            }
        }           

        checkThreshold();
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed

    }//GEN-LAST:event_deleteBtnActionPerformed

    String[][] products = new String [100][8];
    String[] newProd = new String [12];
    int[][] costs = new int[100][3];
    int[][] orderCount = new int[100][1];
    int counter = 0;
    
    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        DefaultTableModel products_Table = (DefaultTableModel) pTable.getModel(); 
        DefaultTableModel products_Table2 = (DefaultTableModel) pTable2.getModel();
        
        Cprog_Exer6 a = new Cprog_Exer6();
        String[][] productsXml = a.readFromXmlProducts();
        
        if (productsXml != null) {
            counter = productsXml.length;
        }
        
        if (counter == 0) {
            products_Table.setRowCount(0);
            products_Table2.setRowCount(0);
        }
        
        id.setText(String.valueOf(counter + 1));
        
        String newDesc = pDesc.getText();
        String newType = pType.getText();
        boolean exists = false;
        
        for(int i = 0; i < counter; i++) {
            if(products[i][2] != null && products[i][1] != null && products[i][2].equals(newDesc) && products[i][1].equals(newType)) {
                exists = true;
                break;
            }
        }
        
        products[counter][0] = id.getText();
        products[counter][1] = newType;
        products[counter][2] = newDesc;
        products[counter][3] = pSupplier.getText();
        products[counter][4] = pCost.getText();
        products[counter][5] = pThreshold.getText();
        products[counter][6] = pQuantity.getText();
        products[counter][7] = pDate.getText();
 
        
        costs[counter][0] = Integer.parseInt(pLaborCost.getText());
        costs[counter][1] = Integer.parseInt(pOverheadCost.getText());
        costs[counter][2] = Integer.parseInt(pDesiredProfit.getText());
        
        int unitPrice = 0;
        
        for (int i = 0; i < costs[counter].length; i++) {
            unitPrice += costs[counter][i];
        }
         
        unitPrice = unitPrice + Integer.parseInt(products[counter][4]); 
        
        orderCount[counter][0] = 0;
        
        for (int i = 0; i < 8; i++) {
            newProd[i] = products[counter][i];
            newProd[8] = String.valueOf(costs[counter][0]);
            newProd[9] = String.valueOf(costs[counter][1]);
            newProd[10] = String.valueOf(costs[counter][2]);
            newProd[11] = String.valueOf(orderCount[counter][0]);
        }
        
        Cprog_Exer6.appendToXml("products", "product", newProd);
        
        if(!exists) {
            String[] item = {products[counter][0],products[counter][1],products[counter][2],products[counter][6],products[counter][4],String.valueOf(unitPrice), String.valueOf(orderCount[counter][0])};
            products_Table.addRow(item);
            products_Table2.setRowCount(0);   
        }else {
            products_Table.setRowCount(0);
            
            for(int x = 0; x < counter + 1; x++){
                if(x == 0){    
                    showArray(x);
                }else {
                    boolean alreadyInTable = false;
                    
                    for(int y = 0; y < products_Table.getRowCount(); y++){
                        if(products[x][1].equals(products_Table.getValueAt(y, 1)) && products[x][2].equals(products_Table.getValueAt(y, 2))){
                           alreadyInTable = true; 
                           break;
                        }
                    }
                    
                    if(!alreadyInTable) {
                        showArray(x);
                    }
                }
            }
        }

//        messageBox("Save Record?","Record");
        
        int batchNumber = products_Table2.getRowCount() + 1;
        String[] item2 = {products[counter][0], String.valueOf(batchNumber),products[counter][3],products[counter][6],products[counter][4],String.valueOf(unitPrice),products[counter][7], String.valueOf(orderCount[counter][0])};
        products_Table2.addRow(item2);
              
        checkThreshold();
        
        counter++;
        
        if(counter >= 100) {
            JOptionPane.showMessageDialog(this, "Maximum capacity reached!"); 
        }
    }//GEN-LAST:event_saveBtnActionPerformed
    
    public void showArray(int x){
        DefaultTableModel products_Table = (DefaultTableModel) pTable.getModel();  
        
        int totalQuantity = 0;
        int totalCost = 0;
        int totalPrice = 0;
        int totalOrders = 0;
                    
        for (int y = 0; y < counter + 1; y++){
            if(products[x][1].equals(products[y][1]) && products[x][2].equals(products[y][2])){
                totalQuantity += Integer.parseInt(products[y][6]); 
                totalCost += Integer.parseInt(products[y][4]);
                totalPrice += costs[y][0] + costs[y][1] + costs[y][2] + Integer.parseInt(products[y][4]);
                totalOrders += orderCount[y][0];
            }
        }     
        
        String[] item = {products[x][0], products[x][1], products[x][2], String.valueOf(totalQuantity), String.valueOf(totalCost), String.valueOf(totalPrice), String.valueOf(totalOrders)};
        products_Table.addRow(item);
    }
 
    public void checkThreshold() {
        
        threshBtn.setText("No Threshold");
        
        for (int pCount = 0; pCount < products.length; pCount++) {
            if (products[pCount][0] != null && Integer.parseInt(products[pCount][6]) <= Integer.parseInt(products[pCount][5])) {
                threshBtn.setText("Threshold reached for Product ID " + products[pCount][0]);
            } 
        }
        
    }
    
    public String getProductSupplierThreshold() {
        String supplierThresh = null;  

        for (int pCount = 0; pCount < products[0].length; pCount++) {

            if (products[pCount][0] != null && Integer.parseInt(products[pCount][6]) <= Integer.parseInt(products[pCount][5])) {
                supplierThresh = products[pCount][3];  
            }
        }

        return supplierThresh;  
    }
    
    public String getProductTypeThreshold() {
        String typeThresh = null;
        
        for (int pCount = 0; pCount < products.length; pCount++) {
            if (products[pCount][0] != null && Integer.parseInt(products[pCount][6]) <= Integer.parseInt(products[pCount][5])) {
                typeThresh = products[pCount][1];
            }
        }
        return typeThresh;   
    } 
    
    public String getProductDescThreshold() {
        String descThresh = null;
        
        for (int pCount = 0; pCount < products.length; pCount++) {
            if (products[pCount][0] != null && Integer.parseInt(products[pCount][6]) <= Integer.parseInt(products[pCount][5])) {
                descThresh = products[pCount][2];
            }
        }
        return descThresh;   
    }  
    
    public String getProductCostThreshold() {
        String costThresh = null;
        
        for (int pCount = 0; pCount < products.length; pCount++) {
            if (products[pCount][0] != null && Integer.parseInt(products[pCount][6]) <= Integer.parseInt(products[pCount][5])) {
                costThresh = products[pCount][4];
            }
        } 
        return costThresh;   
    } 
    
    private void pTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pTableMouseClicked

        DefaultTableModel products_Table2 = (DefaultTableModel) pTable2.getModel();
        
        Cprog_Exer6 a = new Cprog_Exer6();
        String[][] productsXml = a.readFromXmlProducts();

        if(productsXml != null) {
           counter = productsXml.length;
        }
        
        products_Table2.setRowCount(0);
        
        int[] selectedRow = pTable.getSelectedRows();
        
        if(selectedRow.length > 0) {
            String selectedId = pTable.getValueAt(selectedRow[0],0).toString();
            id.setText(selectedId);
            String selectedType = pTable.getValueAt(selectedRow[0], 1).toString();
            pType.setText(selectedType);
            String selectedDesc= pTable.getValueAt(selectedRow[0], 2).toString();
            pDesc.setText(selectedDesc);
            
            int batchNumber = 0;
            
            for (int i = 0; i < products.length; i++) {
                if (products[i][2] != null && products[i][1] != null && products[i][2].equals(selectedDesc) && products[i][1].equals(selectedType)) {
                    batchNumber++;
                                       
                    int storedLaborCost = costs[i][0];  
                    int storedOverheadCost = costs[i][1];  
                    int storedDesiredProfit = costs[i][2];

                    int unitPrice = Integer.parseInt(products[i][4]) +  storedLaborCost + storedOverheadCost + storedDesiredProfit;

                    String[] item = {products[i][0], String.valueOf(batchNumber), products[i][3], products[i][6], products[i][4], String.valueOf(unitPrice), products[i][7], String.valueOf(orderCount[i][0])};
                    products_Table2.addRow(item);
                }
            }
        }
        
        checkThreshold();
               
    }//GEN-LAST:event_pTableMouseClicked

    private void pLaborCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pLaborCostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pLaborCostActionPerformed

    private void pTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pTable2MouseClicked
        int[] selectedRow = pTable2.getSelectedRows();
        
        String selectedId = pTable2.getValueAt(selectedRow[0], 0).toString();
        
        id.setText(selectedId);
        pSupplier.setText(pTable2.getValueAt(selectedRow[0], 2).toString());
        pQuantity.setText(pTable2.getValueAt(selectedRow[0], 3).toString());
        pCost.setText(pTable2.getValueAt(selectedRow[0], 4).toString());
        pDate.setText(pTable2.getValueAt(selectedRow[0], 6).toString());
        String selectedThresh = String.valueOf(products[Integer.parseInt(selectedId) - 1][5]);
        pThreshold.setText(selectedThresh);
        
        String selectedLaborCost = String.valueOf(costs[Integer.parseInt(selectedId) - 1][0]);
        pLaborCost.setText(selectedLaborCost);
 
        String selectedOverheadCost = String.valueOf(costs[Integer.parseInt(selectedId) - 1][1]);
        pOverheadCost.setText(selectedOverheadCost);
        
        String selectedDesiredProfit = String.valueOf(costs[Integer.parseInt(selectedId) - 1][2]);
        pDesiredProfit.setText(selectedDesiredProfit);
        
        int[] selectRowA = pTable.getSelectedRows();
        int[] selectRowB = pTable2.getSelectedRows();
        
        String productId = pTable2.getValueAt(selectRowB[0], 0).toString();
        String productType = pTable.getValueAt(selectRowA[0], 1).toString();
        String productDesc = pTable.getValueAt(selectRowA[0], 2).toString();
        String productPrice = pTable2.getValueAt(selectRowB[0], 5).toString();
        
        custOrder[0] = productId;
        custOrder[1] = productType;
        custOrder[2] = productDesc;
        custOrder[3] = productPrice;
   
    }//GEN-LAST:event_pTable2MouseClicked

   
    private void saveBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtn2ActionPerformed
        DefaultTableModel products_Table = (DefaultTableModel) pTable.getModel();
        DefaultTableModel products_Table2 = (DefaultTableModel) pTable2.getModel();
        
        Cprog_Exer6 a = new Cprog_Exer6();
        String[][] productsXml = a.readFromXmlProducts();

        if(productsXml != null) {
           counter = productsXml.length;
        }
        
        for (int i = 0; i < counter; i++) {
            Cprog_Exer6.deleteRowFromXml("products", "product", "field1", productsXml[i][0]);
        }
        
        String newLaborCost = pLaborCost.getText();
        String newOverheadCost = pOverheadCost.getText();
        String newDesiredProfit = pDesiredProfit.getText();
        
        for (int i = 0; i < counter; i++){
            costs[i][0] = Integer.parseInt(newLaborCost);
            costs[i][1] = Integer.parseInt(newOverheadCost);
            costs[i][2] = Integer.parseInt(newDesiredProfit);
        }        
        
        for (int i = 0; i < counter; i++) {
            if (products[i][0] != null) {
                for (int j = 0; j < 8; j++) {
                    newProd[j] = products[i][j];
                    newProd[8] = String.valueOf(costs[i][0]);
                    newProd[9] = String.valueOf(costs[i][1]);
                    newProd[10] = String.valueOf(costs[i][2]);
                    newProd[11] = String.valueOf(orderCount[i][0]);
                }
                Cprog_Exer6.appendToXml("products", "product", newProd);
            }
        }
        
        products_Table.setRowCount(0); 
        for(int x = 0; x < counter ; x++){
            if(x == 0){
                showArray(x);
            }else {
                boolean alreadyInTable = false;

                for(int y = 0; y < products_Table.getRowCount(); y++){
                    if(products[x][1].equals(products_Table.getValueAt(y, 1)) && products[x][2].equals(products_Table.getValueAt(y, 2))){
                       alreadyInTable = true; 
                       break;
                    }
                }

                if(!alreadyInTable) {
                    showArray(x);
                }
            }
        }
        
        products_Table2.setRowCount(0);
        int batchNumber = 0;
        
        for (int i = 0; i < counter; i++) {
            if (products[i][0] != null && products[i][1].equals(pType.getText()) && products[i][2].equals(pDesc.getText())) {
                batchNumber++; 

                costs[i][0] = Integer.parseInt(pLaborCost.getText());
                costs[i][1] = Integer.parseInt(pOverheadCost.getText());
                costs[i][2] = Integer.parseInt(pDesiredProfit.getText());
                
                int unitPrice = Integer.parseInt(products[i][4]) + costs[i][0] + costs[i][1] + costs[i][2];
                
                String[] item2 = {products[i][0], String.valueOf(batchNumber), products[i][3], products[i][6], products[i][4], String.valueOf(unitPrice), products[i][7], String.valueOf(orderCount[i][0])};
                products_Table2.addRow(item2);
            
            }
        }       
    }//GEN-LAST:event_saveBtn2ActionPerformed

    private static int messageBox(String msg, String titlebar, boolean option) {
        return JOptionPane.showConfirmDialog(null, msg, titlebar, JOptionPane.OK_CANCEL_OPTION);
    }   
    
    public void updateOrders () {
        DefaultTableModel products_Table = (DefaultTableModel) pTable.getModel();
        DefaultTableModel products_Table2 = (DefaultTableModel) pTable2.getModel();
        
        products_Table2.setRowCount(0); 
        int batchNumber = 0;
        int selectedId = Integer.parseInt(id.getText()) - 1; 

        Cprog_Exer6 a = new Cprog_Exer6();
        String[][] productsXml = a.readFromXmlProducts();

        if (productsXml != null) {
            counter = productsXml.length;
        }
        
        for (int i = 0; i < counter; i++) {
            Cprog_Exer6.deleteRowFromXml("products", "product", "field1", productsXml[i][0]);
        }
        
        orderCount[selectedId][0] = orderCount[selectedId][0] + 1;
        products[selectedId][6] =  String.valueOf(Integer.parseInt(products[selectedId][6]) - 1);
        
        for (int i = 0; i < counter; i++) {
            if (products[i][0] != null && products[i][1].equals(pType.getText()) && products[i][2].equals(pDesc.getText())) {
                batchNumber++;

                int storedLaborCost = costs[i][0];
                int storedOverheadCost = costs[i][1];
                int storedDesiredProfit = costs[i][2];

                int unitPrice = Integer.parseInt(products[i][4]) + storedLaborCost + storedOverheadCost + storedDesiredProfit;

                String[] item2 = {products[i][0], String.valueOf(batchNumber), products[i][3], products[i][6], products[i][4], String.valueOf(unitPrice), products[i][7], String.valueOf(orderCount[i][0])};
                products_Table2.addRow(item2);
            }
        }    
        
        for (int i = 0; i < counter; i++) {
            if (products[i][0] != null) {
                for (int j = 0; j < 8; j++) {
                    newProd[j] = products[i][j];
                    newProd[8] = String.valueOf(costs[i][0]);
                    newProd[9] = String.valueOf(costs[i][1]);
                    newProd[10] = String.valueOf(costs[i][2]);
                    newProd[11] = String.valueOf(orderCount[i][0]);
                }
                Cprog_Exer6.appendToXml("products", "product", newProd);
            }
        }
        
        products_Table.setRowCount(0); 
        for(int x = 0; x < counter ; x++){
            if(x == 0){
                showArray(x);
            }else {
                boolean alreadyInTable = false;

                for(int y = 0; y < products_Table.getRowCount(); y++){
                    if(products[x][1].equals(products_Table.getValueAt(y, 1)) && products[x][2].equals(products_Table.getValueAt(y, 2))){
                       alreadyInTable = true; 
                       break;
                    }
                }

                if(!alreadyInTable) {
                    showArray(x);
                }
            }
        }
           
        
    }

    public void updateDeletedOrders () {
        DefaultTableModel products_Table = (DefaultTableModel) pTable.getModel();
        DefaultTableModel products_Table2 = (DefaultTableModel) pTable2.getModel();    
        
        products_Table2.setRowCount(0); 
        int selectedId = Integer.parseInt(id.getText()) - 1; 
        int batchNumber = 0;
        
        Cprog_Exer6 a = new Cprog_Exer6();
        String[][] productsXml = a.readFromXmlProducts();

        if (productsXml != null) {
            counter = productsXml.length;
        }
        
        for (int i = 0; i < counter; i++) {
            Cprog_Exer6.deleteRowFromXml("products", "product", "field1", productsXml[i][0]);
        }
        
        orderCount[selectedId][0] = orderCount[selectedId][0] - 1;
        products[selectedId][6] =  String.valueOf(Integer.parseInt(products[selectedId][6]) + 1);
        
        for (int i = 0; i < counter; i++) {
            if (products[i][0] != null && products[i][1].equals(pType.getText()) && products[i][2].equals(pDesc.getText())) {
                batchNumber++;

                int storedLaborCost = costs[i][0];
                int storedOverheadCost = costs[i][1];
                int storedDesiredProfit = costs[i][2];

                int unitPrice = Integer.parseInt(products[i][4]) + storedLaborCost + storedOverheadCost + storedDesiredProfit;

                String[] item2 = {products[i][0], String.valueOf(batchNumber), products[i][3], products[i][6], products[i][4], String.valueOf(unitPrice), products[i][7], String.valueOf(orderCount[i][0])};
                products_Table2.addRow(item2);
            }
        }    
        
        for (int i = 0; i < counter; i++) {
            if (products[i][0] != null) {
                for (int j = 0; j < 8; j++) {
                    newProd[j] = products[i][j];
                    newProd[8] = String.valueOf(costs[i][0]);
                    newProd[9] = String.valueOf(costs[i][1]);
                    newProd[10] = String.valueOf(costs[i][2]);
                    newProd[11] = String.valueOf(orderCount[i][0]);
                }
                Cprog_Exer6.appendToXml("products", "product", newProd);
            }
        }
        

        
        products_Table.setRowCount(0); 
        for(int x = 0; x < counter ; x++){
            if(x == 0){
                showArray(x);
            }else {
                boolean alreadyInTable = false;

                for(int y = 0; y < products_Table.getRowCount(); y++){
                    if(products[x][1].equals(products_Table.getValueAt(y, 1)) && products[x][2].equals(products_Table.getValueAt(y, 2))){
                       alreadyInTable = true; 
                       break;
                    }
                }

                if(!alreadyInTable) {
                    showArray(x);
                }
            }
        }
           
        
    }    
    
    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        SimpleDateFormat formatter = new SimpleDateFormat ("MM/dd/yyyy");
        Date date = new Date();
        
            pDate.setText(formatter.format(date));
    }//GEN-LAST:event_formWindowActivated

    public void getProductIdNumber(int prodId) {
      
        id.setText(String.valueOf(prodId));
        
    }
    
    private void pTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pTable2KeyPressed

    }//GEN-LAST:event_pTable2KeyPressed

    private Suppliers suppinstance;
    public Products(Suppliers s) {
        suppinstance = s;
        initComponents();
    }

    
    private void threshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threshBtnActionPerformed
        int choice = messageBox("Create PO?", "Purchase Order?", true);
        
        if (choice == JOptionPane.OK_OPTION) {
            String orderQuantity = JOptionPane.showInputDialog(null, "Enter Quantity", "Quantity", JOptionPane.QUESTION_MESSAGE);
            String orderDate = JOptionPane.showInputDialog(null, "Enter Delivery Date", "Deliver Date", JOptionPane.QUESTION_MESSAGE); 
            suppinstance.SearchSupplier(getProductSupplierThreshold());
            suppinstance.addNewSupplierOrder(getProductTypeThreshold(), getProductDescThreshold(), orderQuantity, getProductCostThreshold(), orderDate );

            suppinstance.showSupplierOrders();
        }
        
    }//GEN-LAST:event_threshBtnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
                                 
        Cprog_Exer6 a = new Cprog_Exer6();
        DefaultTableModel productsTable1 = (DefaultTableModel) pTable.getModel();
        DefaultTableModel productsTable2 = (DefaultTableModel) pTable2.getModel();

        String[][] productsXml = a.readFromXmlProducts();
        productsTable1.setRowCount(0);
        productsTable2.setRowCount(0);

        for (int i = 0; i < productsXml.length; i++) {
            boolean isDuplicate = false;

            products[i][0] = productsXml[i][0];
            products[i][1] = productsXml[i][1];
            products[i][2] = productsXml[i][2];
            products[i][3] = productsXml[i][3];
            products[i][4] = productsXml[i][4];
            products[i][5] = productsXml[i][5];
            products[i][6] = productsXml[i][6];
            products[i][7] = productsXml[i][7];

            costs[i][0] = Integer.parseInt(String.valueOf(productsXml[i][8]));
            costs[i][1] = Integer.parseInt(String.valueOf(productsXml[i][9]));
            costs[i][2] = Integer.parseInt(String.valueOf(productsXml[i][10]));
            orderCount[i][0] = Integer.parseInt(String.valueOf(productsXml[i][11]));

            for (int j = 0; j < i; j++) {
                if (productsXml[i][1].equals(productsXml[j][1]) &&
                    productsXml[i][2].equals(productsXml[j][2])) {
                    isDuplicate = true;
                    break;
                }
            }

            if (!isDuplicate) {

                int totalCost = 0;
                int totalQuantity = 0;
                int totalPrice = 0;
                int totalOrders = 0;


                for (int j = 0; j < productsXml.length; j++) {
                    if (productsXml[j][1].equals(productsXml[i][1]) && 
                        productsXml[j][2].equals(productsXml[i][2])) {
                        totalCost += Integer.parseInt(productsXml[j][4]); 
                        totalQuantity += Integer.parseInt(productsXml[j][6]);
                        totalPrice += Integer.parseInt(productsXml[j][10]) + Integer.parseInt(productsXml[j][9]) + Integer.parseInt(productsXml[j][8]) + Integer.parseInt(productsXml[j][4]);
                        totalOrders += Integer.parseInt(productsXml[j][11]);
                    }
                }

                String[] totalTable1 = {
                    productsXml[i][0], 
                    productsXml[i][1], 
                    productsXml[i][2], 
                    String.valueOf(totalQuantity), 
                    String.valueOf(totalCost), 
                    String.valueOf(totalPrice), 
                    String.valueOf(totalOrders)  
                };
                productsTable1.addRow(totalTable1);
            }
        }

    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Products.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Products().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JTextField id;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField pCost;
    private javax.swing.JTextField pDate;
    private javax.swing.JTextField pDesc;
    private javax.swing.JTextField pDesiredProfit;
    private javax.swing.JTextField pLaborCost;
    private javax.swing.JTextField pOverheadCost;
    private javax.swing.JTextField pQuantity;
    private javax.swing.JTextField pSupplier;
    private javax.swing.JTable pTable;
    private javax.swing.JTable pTable2;
    private javax.swing.JTextField pThreshold;
    private javax.swing.JTextField pType;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton saveBtn2;
    private javax.swing.JButton threshBtn;
    // End of variables declaration//GEN-END:variables
}
