/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cprog_exer6;

import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Image;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileOutputStream;
import java.text.DecimalFormat;

/**
 *
 * @author Dell
 */
public class Customers extends javax.swing.JFrame {
    
    String[][][] orders = new String[100][10][7];
    String custId;
    String selectedProductId;

    Suppliers supplierForms = new Suppliers();
    Products prodForm = new Products(supplierForms);

    
    public Customers() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cAddress = new javax.swing.JTextField();
        cContact = new javax.swing.JTextField();
        cEmail = new javax.swing.JTextField();
        cBirthday = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        cTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        id = new javax.swing.JTextField();
        cGender = new javax.swing.JComboBox<>();
        cName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        deleteOrder = new javax.swing.JButton();
        cOrder = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        invoiceBtn = new javax.swing.JButton();
        salesReportBtn = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        productsForm = new javax.swing.JMenuItem();
        supplierForm = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        cTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "NAME", "ADDRESS", "CONTACT NUMBER", "EMAIL", "BIRTHDATE", "GENDER"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(cTable);

        jLabel1.setText("Customer ID");

        jLabel2.setText("Costumer Name");

        jLabel3.setText("Customer Address");

        jLabel4.setText("Customer Contact #");

        jLabel5.setText("Customer Email");

        jLabel6.setText("Customer Bday");

        jLabel7.setText("Customer Gender");

        id.setEditable(false);
        id.setBackground(new java.awt.Color(204, 204, 204));
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        cGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));
        cGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cGenderActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Snap ITC", 1, 24)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Customer Registration System");

        jLabel9.setText("Lastname, Firstname");

        jLabel10.setText("[a-z]@[a-z].com");

        jLabel11.setText("mm/dd/yy");

        cTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ProdID", "ProdType", "ProdDesc", "Quantity", "Unit Price", "Total Price", "Order Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(cTable2);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        editBtn.setText("Update");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        saveBtn.setText("Save");
        saveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBtnMouseClicked(evt);
            }
        });
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        jLabel12.setText("Record");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteBtn)
                            .addComponent(editBtn)))
                    .addComponent(jLabel12))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editBtn)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        deleteOrder.setText("Delete");
        deleteOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOrderActionPerformed(evt);
            }
        });

        cOrder.setText("Add");
        cOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cOrderActionPerformed(evt);
            }
        });

        jLabel13.setText("Order");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteOrder)
                    .addComponent(cOrder))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cOrder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteOrder)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        invoiceBtn.setText("Invoice");
        invoiceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceBtnActionPerformed(evt);
            }
        });

        salesReportBtn.setText("Sales Report");
        salesReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesReportBtnActionPerformed(evt);
            }
        });

        jLabel14.setText("Print");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel14)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invoiceBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salesReportBtn))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(invoiceBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(salesReportBtn)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jMenu1.setText("Open");

        productsForm.setText("Products");
        productsForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productsFormActionPerformed(evt);
            }
        });
        jMenu1.add(productsForm);

        supplierForm.setText("Supplier");
        supplierForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierFormActionPerformed(evt);
            }
        });
        jMenu1.add(supplierForm);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cGender, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(id)
                                    .addComponent(cName)
                                    .addComponent(cAddress)
                                    .addComponent(cContact)
                                    .addComponent(cEmail)
                                    .addComponent(cBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel11)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 911, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(469, Short.MAX_VALUE)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(430, 430, 430))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(cBirthday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void messageBox(String msg, String titlebar) {
       JOptionPane.showMessageDialog(null,msg,titlebar,JOptionPane.INFORMATION_MESSAGE);
    }
    
    
    private void cTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cTableMouseClicked

        int[] selectedRow = cTable.getSelectedRows();
        
        String selectedCustomerId = cTable.getValueAt(selectedRow[0], 0).toString();
        
        id.setText(selectedCustomerId);
        cName.setText(cTable.getValueAt(selectedRow[0], 1).toString());
        cAddress.setText(cTable.getValueAt(selectedRow[0], 2).toString());
        cContact.setText(cTable.getValueAt(selectedRow[0], 3).toString());
        cEmail.setText(cTable.getValueAt(selectedRow[0], 4).toString());
        cBirthday.setText(cTable.getValueAt(selectedRow[0], 5).toString());
        cGender.setSelectedItem(cTable.getValueAt(selectedRow[0], 6).toString());
        
        DefaultTableModel cust_Table2 = (DefaultTableModel) cTable2.getModel();
        cust_Table2.setRowCount(0);  
        int customerIndex = Integer.parseInt(selectedCustomerId) - 1;  

        for (int i = 0; i < orders[0].length; i++) {          
            if (orders[customerIndex][i][0] != null) { 
                String[] orderRow = createOrderRow(customerIndex, i);
                cust_Table2.addRow(orderRow);
            }
        }
    }//GEN-LAST:event_cTableMouseClicked

    private void saveBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBtnMouseClicked

    }//GEN-LAST:event_saveBtnMouseClicked

    int counter = 0;
    String[][] cust = new String [100][7];
    static String[] newCust = new String [7];
    
    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        DefaultTableModel cust_Table = (DefaultTableModel) cTable.getModel();
        Cprog_Exer6 a = new Cprog_Exer6();
        String[][] customers = a.readFromXml();

        if(customers != null) {
           counter = customers.length;
        }

        id.setText(String.valueOf(counter + 1));
         
        if(counter == 0){
          cust_Table.setRowCount(0);
        }

        cust[counter][0] = id.getText();
        cust[counter][1] = cName.getText();
        cust[counter][2] = cAddress.getText();
        cust[counter][3] = cContact.getText();
        cust[counter][4] = cEmail.getText();
        cust[counter][5] = cBirthday.getText();
        cust[counter][6] = String.valueOf(cGender.getSelectedItem());

        int[] custIDArray = new int[counter + 1];

        for(int i = 0; i < counter + 1; i++) {
            custIDArray[i] = Integer.parseInt(cust[i][0]); 
        }

        for(int i = 0; i < custIDArray.length; i++) {
            for(int j = 0; j < custIDArray.length - 1; j++) {
                if(custIDArray[j] > custIDArray[j + 1]){
                    int temp = custIDArray[j + 1];
                    custIDArray[j + 1] = custIDArray[j];
                    custIDArray[j] = temp;    
                }     
            }
        }


        for(int num = 0; num < counter; num++) {
            if(custIDArray[num] != num+1){
                id.setText(String.valueOf(num + 1));
                cust[counter][0] = String.valueOf(num + 1);
                break;
            }
         }

        messageBox("Save Record?","Record");

        cust_Table.setRowCount(0);

        for(int i = 0; i < cust.length; i++){
           if(cust[i][0] != null) 
             cust_Table.addRow(cust[i]);  
        }  

        for (int i = 0; i < 7; i++) {
            newCust[i] = cust[counter][i];
        }

        Cprog_Exer6.appendToXml("customers", "customer", newCust);

        counter++;

        
    }//GEN-LAST:event_saveBtnActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

    private void cGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cGenderActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        DefaultTableModel cust_Table = (DefaultTableModel) cTable.getModel();
        Cprog_Exer6 a = new Cprog_Exer6();
        String[][] customers = a.readFromXml();

        if (customers != null) {
            counter = customers.length;
        }

        for (int i = 0; i < counter; i++) {
            if (cust[i][0].equals(id.getText())) {
                Cprog_Exer6.deleteRowFromXml("customers", "customer", "field1", cust[i][0]);

                String iden = cust[i][0];
                String birthday = cust[i][5];
                String gender = cust[i][6];

                cust[i][0] = iden;
                cust[i][1] = cName.getText(); 
                cust[i][2] = cAddress.getText(); 
                cust[i][3] = cContact.getText(); 
                cust[i][4] = cEmail.getText();   
                cust[i][5] = birthday; 
                cust[i][6] = gender;   
            }
        }

        for (int i = 0; i < customers.length; i++) {
            Cprog_Exer6.deleteRowFromXml("customers", "customer", "field1", customers[i][0]);
        }

        for (int i = 0; i < counter; i++) {
            if (cust[i][0] != null) {
                for (int j = 0; j < 7; j++) {
                    newCust[j] = cust[i][j];
                }
                Cprog_Exer6.appendToXml("customers", "customer", newCust);
            }
        }

        cust_Table.setRowCount(0);
        for (int i = 0; i < counter; i++) {
            if (cust[i][0] != null) {
                cust_Table.addRow(cust[i]);
            }
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        DefaultTableModel cust_Table = (DefaultTableModel) cTable.getModel(); 
        DefaultTableModel custTable2 = (DefaultTableModel) cTable2.getModel();
    
        String deleteId = id.getText();

        Cprog_Exer6 a = new Cprog_Exer6();
        String[][] customers = a.readFromXml();
        String[][] ordersXml = a.readFromXmlOrders();
        
        if(customers != null) {
           counter = customers.length;
        }
        
        for(int x = 0; x < counter; x++) {
            int y = x;
            if(cust[x][0].equals(id.getText())) {
                while(y < counter){
                    cust[y][0] = cust[y+1][0];
                    cust[y][1] = cust[y+1][1];
                    cust[y][2] = cust[y+1][2];
                    cust[y][3] = cust[y+1][3];
                    cust[y][4] = cust[y+1][4];
                    cust[y][5] = cust[y+1][5];
                    cust[y][6] = cust[y+1][6];
                    y++;
                }
                break;
            }
        }

        counter--;

        Cprog_Exer6.deleteRowFromXml("customers", "customer", "field1", deleteId);
        
        for (int i = 0; i < ordersXml.length; i++) {
            if (ordersXml[i][0] != null && ordersXml[i][0].equals(deleteId)) {
                Cprog_Exer6.deleteRowFromXml("orders", "order", "field1", deleteId);
            }
        }
        
        cust_Table.setRowCount(0);
        custTable2.setRowCount(0);
        
        for(int i = 0; i < cust.length; i++){
           if(cust[i][0] != null) 
             cust_Table.addRow(cust[i]);  
        }   
        
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void supplierFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierFormActionPerformed

        supplierForms.setVisible(true);
    }//GEN-LAST:event_supplierFormActionPerformed

    private void productsFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productsFormActionPerformed

        prodForm.setVisible(true);
    }//GEN-LAST:event_productsFormActionPerformed

    String[] newOrders = new String[7];
    
    private void cOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cOrderActionPerformed

        SimpleDateFormat formatter = new SimpleDateFormat ("MM/dd/yyyy");
        Date date = new Date(); 
        boolean found = false;
        
        DefaultTableModel cust_Table2 = (DefaultTableModel) cTable2.getModel();
        
        Cprog_Exer6 a = new Cprog_Exer6();
        String[][] ordersXml = a.readFromXmlOrders();
        
        custId = id.getText();
        
        int y = findNextEmptyOrderSlot();
        int i = Integer.parseInt(custId) - 1;
        
        int selectedProduct = Integer.parseInt(prodForm.custOrder[0]) - 1;
        
        if (Integer.parseInt(prodForm.products[selectedProduct][6]) > 0 ) {
            
            if (ordersXml != null) {

                for (int j = 0; j < orders[i].length; j++) {
                    if (orders[i][j][0] != null) {

                        Cprog_Exer6.deleteRowFromXml("orders", "order", "field1", orders[i][j][0]);
                    }
                }
            }
            
            for (int j = 0; j < orders[0].length; j++) {
                if (orders[i][j][0] != null && orders[i][j][0].equals(custId) && orders[i][j][1].equals(prodForm.custOrder[0])) {
                    orders[i][j][4] = String.valueOf(Integer.parseInt(orders[i][j][4]) + 1);
                    prodForm.updateOrders();
                    found = true;
                    break;
                }
            }


            if (!found) {

                addNewOrder(i, y, formatter.format(date));
                prodForm.updateOrders();  
                String[] item = createOrderRow(i , y);
                cust_Table2.addRow(item);
                
            } else {
                cust_Table2.setRowCount(0);                
                showOrders(i);
                            
                for (int j = 0; j < orders[i].length; j++) {
                    if (orders[i][j][0] != null) {
                        for (int k = 0; k < 7; k++) {
                            newOrders[k] = orders[i][j][k];
                        }

                        Cprog_Exer6.appendToXml("orders", "order", newOrders);
                    }
                }
                                                    
            }
             
        }
        
        prodForm.checkThreshold();
        
    }//GEN-LAST:event_cOrderActionPerformed

    private void deleteOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOrderActionPerformed
    
    DefaultTableModel cust_Table2 = (DefaultTableModel) cTable2.getModel(); 

    int[] selectedRow = cTable2.getSelectedRows();
    
 
        custId = id.getText();
        selectedProductId = cust_Table2.getValueAt(selectedRow[0], 0).toString();
        int i = Integer.parseInt(custId) - 1; 
        

            for (int j = 0; j < orders[0].length; j++) {
                if (orders[i][j][0] != null && orders[i][j][0].equals(custId) && orders[i][j][1].equals(selectedProductId)) {
                    int currentQuantity = Integer.parseInt(orders[i][j][4]);
                    if (currentQuantity > 1) {
                        orders[i][j][4] = String.valueOf(Integer.parseInt(orders[i][j][4]) - 1);
                        for (int x = 0; x < orders[i].length; x++) {
                            if (orders[i][x][0] != null) {
                 
                                Cprog_Exer6.deleteRowFromXml("orders", "order", "field1", orders[i][j][0]);
                            }
                        }
                        for (int y = 0; y < orders[i].length; y++) {
                            if (orders[i][y][0] != null) {
                                for (int k = 0; k < 7; k++) {
                                    newOrders[k] = orders[i][y][k];
                                }

                                Cprog_Exer6.appendToXml("orders", "order", newOrders);
                            }
                        }
                        showOrders(i);  
                        prodForm.updateDeletedOrders();
                    } else {
                            for(int x = 0; x < orders[0].length; x++) {
                                int y = x;
                                if(orders[i][x][0] != null && orders[i][x][0].equals(custId) && orders[i][x][1].equals(selectedProductId)) {
                                    Cprog_Exer6.deleteRowFromXml("orders", "order", "field1", orders[i][x][0]);
                                    while(y < orders[0].length - 1){ 
                                        
                                        orders[i][y][0] = orders[i][y+1][0];
                                        orders[i][y][1] = orders[i][y+1][1];
                                        orders[i][y][2] = orders[i][y+1][2];
                                        orders[i][y][3] = orders[i][y+1][3];
                                        orders[i][y][4] = orders[i][y+1][4];
                                        orders[i][y][5] = orders[i][y+1][5];
                                        orders[i][y][6] = orders[i][y+1][6];
                                        y++;
                                    }
                                        orders[i][y][0] = null;
                                        orders[i][y][1] = null;
                                        orders[i][y][2] = null;
                                        orders[i][y][3] = null;
                                        orders[i][y][4] = null;
                                        orders[i][y][5] = null;
                                        orders[i][y][6] = null;

                                        cust_Table2.setRowCount(0);
                                        showOrders(i);  
                                        prodForm.updateDeletedOrders();
                                        break;
                                }
                            }    
                        }
                }
            }
                               
    }//GEN-LAST:event_deleteOrderActionPerformed

    private void cTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cTable2MouseClicked
        int[] selectedRow = cTable2.getSelectedRows();
        
        String pid = String.valueOf(cTable2.getValueAt(selectedRow[0], 0));
     
        prodForm.getProductIdNumber(Integer.parseInt(pid));
          
    }//GEN-LAST:event_cTable2MouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Cprog_Exer6 a = new Cprog_Exer6();
        DefaultTableModel customerTable1 = (DefaultTableModel) cTable.getModel();
        
        String[][] customers = a.readFromXml();
        customerTable1.setRowCount(0);

            for (int i = 0; i < customers.length; i++) {
                String[] item = {customers[i][0], customers[i][1], customers[i][2], customers[i][3], customers[i][4], customers[i][5], customers[i][6]};
                cust[i][0] = customers[i][0];
                cust[i][1] = customers[i][1];
                cust[i][2] = customers[i][2];
                cust[i][3] = customers[i][3];
                cust[i][4] = customers[i][4];
                cust[i][5] = customers[i][5];
                cust[i][6] = customers[i][6];

                customerTable1.addRow(item);
            }  
        
        
        String[][] ordersXml = a.readFromXmlOrders();
        
        for (int i = 0; i < ordersXml.length; i++) {
            int customerIndex = Integer.parseInt(ordersXml[i][0]) - 1; 
            int orderSlot = findNextEmptyOrderSlotXml(customerIndex); 

            orders[customerIndex][orderSlot][0] = ordersXml[i][0]; 
            orders[customerIndex][orderSlot][1] = ordersXml[i][1]; 
            orders[customerIndex][orderSlot][2] = ordersXml[i][2];  
            orders[customerIndex][orderSlot][3] = ordersXml[i][3]; 
            orders[customerIndex][orderSlot][4] = ordersXml[i][4];  
            orders[customerIndex][orderSlot][5] = ordersXml[i][5];  
            orders[customerIndex][orderSlot][6] = ordersXml[i][6];  
        }
        
    }//GEN-LAST:event_formWindowOpened

    private void invoiceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceBtnActionPerformed
        Document doc = new Document();
        PdfWriter docWriter = null;
        DecimalFormat df = new DecimalFormat("0.00");
        Font bfBold12 = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(0,0,0));
        Font bf12 = new Font(FontFamily.TIMES_ROMAN, 12);
        
        int selectedId = Integer.parseInt(id.getText()) - 1;
        
        String idCust = id.getText();
        String custName = cName.getText();
        String custContact = cContact.getText();
        String custEmail = cEmail.getText();
        String custBday = cBirthday.getText();
        String custGender = String.valueOf(cGender.getSelectedItem());
        
        
        try {
            String path = "c://docs//report1.pdf";
            docWriter = PdfWriter.getInstance(doc , new FileOutputStream(path));
            doc.open();
            
            float[] mainHeader = {2f, 5f};
            float[] header2 = {2f};
            float[] columnTable1 = {2f, 3f, 2f, 2.5f};
            float[] columnTable2 = {2f, 3f, 3f, 3f, 3f, 3.5f};
            float[] totalTable1 = {2f, 3f, 3f, 3f, 3f, 3.5f};           
            float[] bottomTexts = {1f, 2f, 1f, 2f, 1f};
            
            PdfPTable spacer = new PdfPTable(header2);
            insertCell(spacer, " ", Element.ALIGN_LEFT, 1, bfBold12, 0, 255,255,255);
            spacer.getDefaultCell().setBorder(0);
            spacer.setWidthPercentage(100f);
            
            PdfPTable header = new PdfPTable(mainHeader);
            header.setWidthPercentage(50f);
            header.getDefaultCell().setBorder(0);
            header.addCell(Image.getInstance("C:\\docs\\storelogo.png"));
            header.getDefaultCell().setBorder(0);
            header.addCell("Xav Store\nBuhangin, Davao City\nxav@gmail.com, 09201231234");
            doc.add(spacer);
            doc.add(header);
            
            PdfPTable headerTable2 = new PdfPTable(header2);
            headerTable2.setWidthPercentage(90f);
            
            insertCell(headerTable2, "Customer Invoice", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            doc.add(spacer);
            doc.add(headerTable2);
            
            PdfPTable table1 = new PdfPTable(columnTable1);
            table1.setWidthPercentage(90f);
            doc.add(spacer);
            insertCell(table1, "Customer ID", Element.ALIGN_LEFT, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, idCust, Element.ALIGN_LEFT, 1, bf12, 1, 255,255,255);
            insertCell(table1, "Email", Element.ALIGN_LEFT, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, custEmail, Element.ALIGN_LEFT, 1, bf12, 1, 255,255,255);   
            insertCell(table1, "Customer Name", Element.ALIGN_LEFT, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, custName, Element.ALIGN_LEFT, 1, bf12, 1, 255,255,255);
            insertCell(table1, "Bday", Element.ALIGN_LEFT, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, custBday, Element.ALIGN_LEFT, 1, bf12, 1, 255,255,255);
            insertCell(table1, "Contact Number", Element.ALIGN_LEFT, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, custContact, Element.ALIGN_LEFT, 1, bf12, 1, 255,255,255);
            insertCell(table1, "Gender", Element.ALIGN_LEFT, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, custGender, Element.ALIGN_LEFT, 1, bf12, 1, 255,255,255);
            doc.add(table1);
            
            PdfPTable table2 = new PdfPTable(columnTable2);
            table2.setWidthPercentage(90f);
            doc.add(spacer);
            insertCell(table2, "Prod ID", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table2, "Prod Type", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table2, "Description", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table2, "Quantity", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table2, "Unit Price", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table2, "Sub Total", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            
            for (int i = 0; i < orders[0].length; i++) {
                if (orders[selectedId][i][0] != null) {
                    insertCell(table2, orders[selectedId][i][1], Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                    insertCell(table2, orders[selectedId][i][2], Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                    insertCell(table2, orders[selectedId][i][3], Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                    insertCell(table2, orders[selectedId][i][4], Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                    insertCell(table2, orders[selectedId][i][5], Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                    insertCell(table2, String.valueOf(Integer.parseInt(orders[selectedId][i][4]) * Integer.parseInt(orders[selectedId][i][5])), Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                }
            }
            
            doc.add(table2);
            
            PdfPTable totalTable = new PdfPTable(totalTable1);
            totalTable.setWidthPercentage(90f);
            totalTable.setHorizontalAlignment(Element.ALIGN_CENTER);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            
            int totPrice = 0;
            int tax;
            int totBill;
            
            
            for (int i = 0; i < orders[0].length; i++) {
                if (orders[selectedId][i][0] != null) {
                    totPrice += Integer.parseInt(orders[selectedId][i][4]) * Integer.parseInt(orders[selectedId][i][5]);
                }
            }
            
            tax = (int)(totPrice * 0.12);
            
            totBill = totPrice + tax;
            
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, "Sub Total: " + totPrice, Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, "Tax(12%): " + tax, Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCell(totalTable, "Total Bill: " + totBill, Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);

            doc.add(totalTable);
            
            PdfPTable signatureTable = new PdfPTable(bottomTexts);
            signatureTable.setWidthPercentage(100f);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            
            insertCellSignature(signatureTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCellSignature(signatureTable, "Customer", Element.ALIGN_CENTER, 1, bf12, 1, 255, 255, 255);
            insertCellSignature(signatureTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            insertCellSignature(signatureTable, "Cashier", Element.ALIGN_CENTER, 1, bf12, 1, 255, 255, 255);
            insertCellSignature(signatureTable, " ", Element.ALIGN_CENTER, 1, bf12, 0, 255, 255, 255);
            
            doc.add(signatureTable);
                    
        } catch (Exception ex) {
            System.out.print(ex);
        } finally {
            if (doc != null) {
                doc.close();
            }
            if (docWriter != null) {
                docWriter.close();
            }
        }
        
        try {
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + "c:\\docs\\report1.pdf");
        } catch (Exception e) {
            System.out.print(e);
        }
        
    }//GEN-LAST:event_invoiceBtnActionPerformed

    private void salesReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesReportBtnActionPerformed

        Document doc = new Document();
        PdfWriter docWriter = null;
        DecimalFormat df = new DecimalFormat("0.00");
        Font bfBold12 = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(0,0,0));
        Font bf12 = new Font(FontFamily.TIMES_ROMAN, 12);
                      
        try {
            String path = "c://docs//report2.pdf";
            docWriter = PdfWriter.getInstance(doc , new FileOutputStream(path));
            doc.open();
            
            float[] mainHeader = {2f, 5f};
            float[] header2 = {2f};
            float[] columnTable2 = {3.5f, 2f, 3.5f, 2f, 3.5f, 2f, 2.5f, 2f};
            float[] columnTable1 = {3.5f, 2f, 3.5f, 2f, 3.5f, 2.5f, 2.5f, 2f};
            float[] columnTableBottom = {2f, 2f, 2f, 2f, 2f, 2f, 2f, 5f};
            
            PdfPTable spacer = new PdfPTable(header2);
            insertCell(spacer, " ", Element.ALIGN_LEFT, 1, bfBold12, 0, 255,255,255);
            spacer.getDefaultCell().setBorder(0);
            spacer.setWidthPercentage(100f);
            
            PdfPTable header = new PdfPTable(mainHeader);
            header.setWidthPercentage(50f);
            header.getDefaultCell().setBorder(0);
            header.addCell(Image.getInstance("C:\\docs\\storelogo.png"));
            header.getDefaultCell().setBorder(0);
            header.addCell("Xav Store\nBuhangin, Davao City\nxav@gmail.com, 09201231234");
            doc.add(spacer);
            doc.add(header);
            
            PdfPTable headerTable2 = new PdfPTable(header2);
            headerTable2.setWidthPercentage(90f);
            
            insertCell(headerTable2, "Sales Report", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            doc.add(spacer);
            doc.add(headerTable2);
            
            PdfPTable table1 = new PdfPTable(columnTable1);
            table1.setWidthPercentage(90f);
            doc.add(spacer);
            insertCell(table1, "Order Date", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, "Cust ID", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, "Cust Name", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, "Prod ID", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);   
            insertCell(table1, "Product Type", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, "Quantity", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, "Unit Price", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table1, "Total", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);

            
            for (int j = 0; j < orders[0].length; j++) {
                for (int i = 0; i < orders[0].length; i++) {
                    if (orders[j][i][0] != null) {
                        String customerID = orders[j][i][0];
                        String customerName = null;

                        for (int k = 0; k < cust.length; k++) {
                            if (cust[k][0] != null && cust[k][0].equals(customerID)) {
                                customerName = cust[k][1]; 
                                break;
                            }
                        }
                        
                        insertCell(table1, orders[j][i][6], Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                        insertCell(table1, orders[j][i][0], Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                        insertCell(table1, customerName, Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                        insertCell(table1, orders[j][i][1], Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                        insertCell(table1, orders[j][i][2], Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                        insertCell(table1, orders[j][i][4], Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                        insertCell(table1, orders[j][i][5], Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                        insertCell(table1, String.valueOf(Integer.parseInt(orders[j][i][4]) * Integer.parseInt(orders[j][i][5])), Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
                    }
                }
            }
            
            doc.add(table1);
            
            PdfPTable table2 = new PdfPTable(columnTable2);            
            table2.setWidthPercentage(90f);
            table2.setHorizontalAlignment(Element.ALIGN_CENTER);
            doc.add(spacer);
            
            int summaryTotal = 0;
            
            for (int j = 0; j < orders[0].length; j++) {
                for (int i = 0; i < orders[0].length; i++) {
                    if (orders[j][i][0] != null) {
                        summaryTotal += Integer.parseInt(orders[j][i][4]) * Integer.parseInt(orders[j][i][5]);
                    }
                }
            }
            
            insertCell(table2, "Summary", Element.ALIGN_CENTER, 1, bfBold12, 1, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            
            insertCell(table2, String.valueOf(summaryTotal), Element.ALIGN_CENTER, 1, bf12, 1, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(table2, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            
            doc.add(table2);
            
            PdfPTable signatureTable = new PdfPTable(columnTableBottom);
            signatureTable.setWidthPercentage(90f);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);
            doc.add(spacer);

            insertCell(signatureTable, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(signatureTable, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(signatureTable, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(signatureTable, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(signatureTable, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(signatureTable, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCell(signatureTable, " ", Element.ALIGN_CENTER, 1, bfBold12, 0, 255,255,255);
            insertCellSignature(signatureTable, "Cashier", Element.ALIGN_CENTER, 1, bf12, 1, 255, 255, 255);

            doc.add(signatureTable);
                    
        } catch (Exception ex) {
            System.out.print(ex);
        } finally {
            if (doc != null) {
                doc.close();
            }
            if (docWriter != null) {
                docWriter.close();
            }
        }
        
        try {
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + "c:\\docs\\report2.pdf");
        } catch (Exception e) {
            System.out.print(e);
        }
    }//GEN-LAST:event_salesReportBtnActionPerformed

    private void insertCell(PdfPTable table, String text, int align, int colspan, Font font, int border, int r, int g, int b) {
        
        PdfPCell cell = new PdfPCell(new Phrase(text.trim(), font));
        
        cell.setHorizontalAlignment(align);
        
        cell.setColspan(colspan);
        
        if(text.trim().equalsIgnoreCase("")) {
            cell.setMinimumHeight(10f);
        }
        
        if(border == 0) {
            cell.setBorder(Rectangle.NO_BORDER);
        } else {
            cell.setBorder(Rectangle.BOX);
            cell.setBackgroundColor(new BaseColor(r,g,b));
        }
        
        table.addCell(cell);
        
    }
    
    private void insertCellSignature(PdfPTable table, String text, int align, int colspan, Font font, int border, int r, int g, int b) {
        
        PdfPCell cell = new PdfPCell(new Phrase(text.trim(), font));
        
        cell.setHorizontalAlignment(align);
        
        cell.setColspan(colspan);
        
        if(text.trim().equalsIgnoreCase("")) {
            cell.setMinimumHeight(10f);
        }
        
        if(border == 0) {
            cell.setBorder(Rectangle.NO_BORDER);
        } else {
            cell.setBorder(Rectangle.TOP);
            cell.setBackgroundColor(new BaseColor(r,g,b));
        }
        
        table.addCell(cell);
        
    }
    
    
    private int findNextEmptyOrderSlot() {
        
        int y = 0;
        
        for (y = 0; y < orders[0].length; y++) {
            if (orders[Integer.parseInt(custId)-1][y][0] == null) {
                break; 
            }
        }
        return y;
    }
    
    private int findNextEmptyOrderSlotXml(int customerIndex) {
        
        int y = 0;
        
        for (y = 0; y < orders[customerIndex].length; y++) {
            if (orders[customerIndex][y][0] == null) {
                break;
            }
        }
        return y; 
    }
    
    private void addNewOrder(int i, int y, String dateOrdered) {
        orders[i][y][0] = custId; //CUST ID
        orders[i][y][1] = prodForm.custOrder[0]; //PROD ID
        orders[i][y][2] = prodForm.custOrder[1]; //TYPE
        orders[i][y][3] = prodForm.custOrder[2]; //DESC
        orders[i][y][4] = "1"; //QUANTITY
        orders[i][y][5] = prodForm.custOrder[3]; //PRICE
        orders[i][y][6] = dateOrdered; //DATE ORDERED
    }
    
    private String[] createOrderRow(int i, int y) {
        return new String[] {
            orders[i][y][1], orders[i][y][2], 
            orders[i][y][3], orders[i][y][4], 
            orders[i][y][5], String.valueOf(Integer.parseInt(orders[i][y][4]) * Integer.parseInt(orders[i][y][5])), 
            orders[i][y][6]
        };
    }
    
    public void showOrders(int i) {
        DefaultTableModel cust_Table2 = (DefaultTableModel) cTable2.getModel();
        cust_Table2.setRowCount(0); 

        for (int j = 0; j < orders[0].length; j++) {
            if (orders[i][j][0] != null) {  
                String[] item = createOrderRow(i, j);
                cust_Table2.addRow(item);
            }
        }
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Customers().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cAddress;
    private javax.swing.JTextField cBirthday;
    private javax.swing.JTextField cContact;
    private javax.swing.JTextField cEmail;
    private javax.swing.JComboBox<String> cGender;
    private javax.swing.JTextField cName;
    private javax.swing.JButton cOrder;
    private javax.swing.JTable cTable;
    private javax.swing.JTable cTable2;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton deleteOrder;
    private javax.swing.JButton editBtn;
    private javax.swing.JTextField id;
    private javax.swing.JButton invoiceBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem productsForm;
    private javax.swing.JButton salesReportBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JMenuItem supplierForm;
    // End of variables declaration//GEN-END:variables
}
